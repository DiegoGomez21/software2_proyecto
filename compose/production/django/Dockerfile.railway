# Base de Python para la aplicación
FROM --platform=linux/amd64 python:3.11.4-slim-bookworm as python

# Establecer directorio de trabajo
WORKDIR /app

# Variables de entorno
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    BUILD_ENV=production

# Instalar dependencias necesarias del sistema
RUN apt-get update && apt-get install --no-install-recommends -y \
    # dependencies for building Python packages
    build-essential \
    # psycopg2 dependencies
    libpq-dev \
    # Herramientas necesarias para Node.js
    curl \
    gnupg \
    ca-certificates


RUN apt-get update && apt-get install -y --no-install-recommends \
    curl gnupg ca-certificates && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && \
    npm install -g yarn && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Verificar la versión de Node.js instalada
RUN node --version && npm --version


# Actualizar pip
RUN pip install --upgrade pip

# Copiar dependencias de Python
COPY ./requirements.txt ./production.txt /app/

# Instalar dependencias de Python
RUN pip install --no-cache-dir -r production.txt

# ---- Etapa para Tailwind y Node.js ---- #
# FROM node:20.18.1-alpine AS node-build

# # Establecer directorio de trabajo
# WORKDIR /app

# # Copiar archivos necesarios para Tailwind
# COPY ./theme/static_src/package.json ./theme/static_src/
# COPY ./theme/static_src/postcss.config.js ./theme/static_src/
# COPY ./theme/static_src/tailwind.config.js ./theme/static_src/
# COPY ./theme/static_src/src/styles.css ./theme/static_src/src/

# Copiar el directorio frontend
COPY ./frontend ./frontend/
# WORKDIR /app/frontend
# COPY ./package.json ./yarn.lock ./
# RUN yarn install --frozen-lockfile
# RUN yarn run build

WORKDIR /app
# Copiar los archivos de salida de la compilación (si es necesario)
COPY ./static ./static
# ---- Finalizar imagen ---- #
# FROM python-base

# Copiar archivos compilados de Node.js (Tailwind y SCSS)
#COPY --from=node-build /app/theme/static /app/theme/static
#COPY --from=node-build /app/static /app/static

# Copiar el resto del proyecto
COPY . /app/

# RUN apk add --no-cache bash nodejs-current npm && \
#     npm install -g n && \
#     bash -c "n 22.0.0" && \
#     apk del nodejs-current
    
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     npm && \
#     npm install -g npm@latest && \
#     apt-get install -y --no-install-recommends \
#     yarn && \
#     apt-get clean && rm -rf /var/lib/apt/lists/*


WORKDIR /app/theme/static_src
RUN npm install --frozen-lockfile
RUN npm run build

WORKDIR /app

RUN yarn install --frozen-lockfile
RUN yarn run build

# Asegurar que Django detecte npm
ENV PATH="/usr/bin:$PATH"
ENV NPM_BIN_PATH="/usr/bin/npm"

# Ejecutar la construcción de Tailwind
RUN python manage.py tailwind build

# Recoger archivos estáticos
RUN python manage.py collectstatic --noinput

# Copiar el entrypoint.sh
COPY ./compose/production/django/entrypoint.sh /compose/production/django/entrypoint.sh

# Copiar configuración de Nginx y Supervisor
COPY ./compose/production/nginx.conf /etc/nginx/nginx.conf
COPY ./compose/production/supervisord.conf /etc/supervisord.conf

# Configuración del puerto
EXPOSE 8000 80

# Comando de inicio
CMD ["sh", "/compose/production/django/entrypoint.sh"]
