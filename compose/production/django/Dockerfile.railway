# Base de Python para la aplicación
FROM python:3.11-slim AS python-base

# Establecer directorio de trabajo
WORKDIR /app

# Variables de entorno
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    BUILD_ENV=production

# Instalar dependencias del sistema necesarias
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    build-essential \
    libpq-dev \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Actualizar pip
RUN pip install --upgrade pip

# Copiar dependencias de Python
COPY ./requirements.txt ./production.txt /app/

# Instalar dependencias de Python
RUN pip install --no-cache-dir -r production.txt

# ---- Etapa para Tailwind y Node.js ---- #
FROM node:16-alpine AS node-build

# Instalar Yarn
RUN npm install -g yarn

# Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos necesarios para Tailwind
COPY ./theme/static_src/tailwind.config.js ./theme/static_src/postcss.config.js ./theme/static_src/package.json ./theme/static_src/yarn.lock ./

# Instalar dependencias de Node.js
RUN yarn install --frozen-lockfile

# Copiar estilos y compilar Tailwind
COPY ./static ./static
RUN yarn run build

# ---- Finalizar imagen ---- #
FROM python-base

# Copiar archivos compilados de Node.js (Tailwind)
COPY --from=node-build /app/static /app/static

# Copiar el resto del proyecto
COPY . /app/

# Recoger archivos estáticos
RUN python manage.py collectstatic --noinput

# Configuración del puerto
EXPOSE 8000

# Comando de inicio
CMD ["sh", "/compose/production/django/entrypoint.sh"]


