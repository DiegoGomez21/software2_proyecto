# Base de Python para la aplicación
FROM --platform=linux/amd64 python:3.11.4-slim-bookworm as python

# Establecer directorio de trabajo
WORKDIR /app

# Variables de entorno
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    BUILD_ENV=production

# Instalar dependencias necesarias del sistema
RUN apt-get update && apt-get install --no-install-recommends -y \
    # dependencies for building Python packages
    build-essential \
    # psycopg2 dependencies
    libpq-dev \
    # Herramientas necesarias para Node.js
    curl \
    gnupg \
    ca-certificates


RUN apt-get update && apt-get install -y --no-install-recommends \
    curl gnupg ca-certificates && \  
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g npm@latest && \
    npm install -g yarn && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*


# Verificar la versión de Node.js instalada
RUN node --version && npm --version

# ---- Etapa para Tailwind y Node.js ---- #
# FROM node:20.18.1-alpine AS node-build

# # Establecer directorio de trabajo
WORKDIR /app

# Copiar archivos necesarios para Tailwind
COPY ./theme/static_src/package.json ./theme/static_src/
COPY ./theme/static_src/postcss.config.js ./theme/static_src/
COPY ./theme/static_src/tailwind.config.js ./theme/static_src/
COPY ./theme/static_src/src/styles.css ./theme/static_src/src/

# Copiar el directorio frontend
COPY ./frontend ./frontend/
WORKDIR /app/frontend
COPY ./package.json ./yarn.lock ./
RUN yarn install --frozen-lockfile
RUN yarn run build

WORKDIR /app
# Copiar los archivos de salida de la compilación (si es necesario)
COPY ./static ./static

COPY . /app/


WORKDIR /app/theme/static_src
RUN npm install --frozen-lockfile
RUN npm run build

WORKDIR /app

RUN yarn install --frozen-lockfile
RUN yarn run build

# Asegurar que Django detecte npm
ENV PATH="/usr/bin:$PATH"
ENV NPM_BIN_PATH="/usr/bin/npm"

COPY ./static ./static

# Actualizar pip
RUN pip install --upgrade pip

# Copiar dependencias de Python
COPY ./requirements.txt ./production.txt /app/

# Instalar dependencias de Python
RUN pip install --no-cache-dir -r production.txt


# Ejecutar la construcción de Tailwind
RUN python manage.py tailwind build

# Recoger archivos estáticos
RUN python manage.py collectstatic --noinput

RUN chmod -R 777 /var/lib/containers/railwayapp/bind-mounts/c4830ce2-7cb4-43d3-940c-cc5d4aa3de7a/vol_zumrjcntno8z55j3

RUN ls /var/lib/containers/railwayapp/bind-mounts/c4830ce2-7cb4-43d3-940c-cc5d4aa3de7a/vol_zumrjcntno8z55j3 -la

RUN ls /app/media

# Copiar las imágenes desde el volumen montado a STATICFILES_DIRS
#COPY /var/lib/containers/railwayapp/bind-mounts/c4830ce2-7cb4-43d3-940c-cc5d4aa3de7a/vol_zumrjcntno8z55j3 /app/staticfiles/product_images/

# Instalar tree junto con otras herramientas necesarias
RUN apt-get update && apt-get install -y --no-install-recommends \
    tree && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN   tree -L 3 -I 'node_modules'


#COPY ./staticfiles /app/staticfiles/

# Copiar los archivos estáticos recopilados a la ubicación correcta

# Copiar el entrypoint.sh
COPY ./compose/production/django/entrypoint.sh /compose/production/django/entrypoint.sh

# Configuración del puerto
EXPOSE 8000 80

# Comando de inicio
CMD ["sh", "/compose/production/django/entrypoint.sh"]
